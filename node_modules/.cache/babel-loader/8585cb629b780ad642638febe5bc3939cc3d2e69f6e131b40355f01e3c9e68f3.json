{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\j-aco\\\\OneDrive\\\\Escritorio\\\\DoggoApi\\\\PI-Dogs-main\\\\client\\\\src\\\\Components\\\\Home\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { getAllDogs } from \"../../Redux/actions\";\nimport { getAverageLifeSpan, getAverageWeight } from \"../../Utils/GetAverageFunctions\";\nimport LoadingScreen from \"../LoadingScreen/LoadingScreen\";\nimport NavBar from \"../NavBar/NavBar\";\nimport Breeds from \"../Breeds/Breeds\";\nimport Footer from \"../Footer/Footer\";\nimport \"./Home.modules.css\";\n\n/*--------------------------------------------------------------------*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [searchTerm, setSearchTerm] = useState(\"\"); // Término de busqueda\n  const [filteredBreeds, setFilteredBreeds] = useState([]); // Razas filtradas por temperamentos\n  const [selectedTemperaments, setSelectedTemperaments] = useState([]); // Temperamentos seleccionados\n  const [currentPage, setCurrentPage] = useState(1); // Selector de pagina\n  const [resultsPerPage, setResultsPerPage] = useState(8); // Elementos mostrados en pagina\n  const [activeSort, setActiveSort] = useState(\"nameAsc\"); // Selector de ordenamiento\n\n  const breeds = useSelector(state => state.dogs); // Se traen del estado global las razas de perros\n  const temperaments = useSelector(state => state.selectedTemperaments); // Se traen del estado global los temperamentos seleccionados en el componente NavBar\n  const source = useSelector(state => state.selectedIdType); // Selector del tipo de fuente (API, DB, ALL), se trae del estado global\n  const mode = useSelector(state => state.selectedMode); // Selector de OR o AND, se trae del estado global\n\n  console.log(breeds.length);\n\n  //===================================== Paginador ========================================\n\n  // IndexOfLastResult: es el índice del último elemento de la página actual y se calcula multiplicando el número de \n  // la página actual por el número de resultados por página.\n  const indexOfLastResult = currentPage * resultsPerPage;\n\n  // IndexOfFirstResult: es el índice del primer elemento de la página actual y se calcula restando el número de resultados \n  // por página del índice del último resultado de la página actual.\n  const indexOfFirstResult = indexOfLastResult - resultsPerPage;\n\n  // CurrentResults: es un arreglo que contiene los elementos de la página actual, que se obtiene al cortar el arreglo filteredBreeds desde \n  // el índice del primer resultado hasta el índice del último resultado de la página actual.\n  const currentResults = filteredBreeds.slice(indexOfFirstResult, indexOfLastResult);\n\n  // TotalPages: es el número total de páginas que se necesitan para mostrar todos los elementos de filteredBreeds, que se obtiene dividiendo \n  // la longitud del arreglo filteredBreeds por el número de resultados por página y redondeando hacia arriba con la función Math.ceil().\n  const totalPages = Math.ceil(filteredBreeds.length / resultsPerPage);\n\n  // Se aumenta de pagina\n  const nextPage = () => {\n    if (currentPage < totalPages) {\n      // Solo se aumenta si la pagina actual es menor a la cantidad total de paginas\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  // Se retrocede de pagina\n  const previousPage = () => {\n    if (currentPage > 1) {\n      // Solo se retrocede siempre y cuando la pagina actual sea mayor que 1\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  // Se setea la pagina en la que se haya hecho click\n  const handleClick = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  //===================================== UseEffects ========================================\n\n  // Se suben al array del estado global los perros recibidos con la funcion getAllDogs\n  useEffect(() => {\n    dispatch(getAllDogs());\n  }, []);\n\n  // Este useEffect no tiene array de dependencias porque se tiene que ejecutar cada que se actualiza un temperamento en el estado global, \n  // Si tuviera un array de dependencias solo se renderizaria una sola vez, y no cada que se actualizan los temperamentos seleccionados\n  useEffect(() => {\n    setSelectedTemperaments(temperaments);\n  });\n  useEffect(() => {\n    if (selectedTemperaments.length === 0 && source === \"all\") {\n      setActiveSort(\"nameAsc\");\n      setCurrentPage(1);\n      setFilteredBreeds(breeds.filter(breed => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\n\n      // Si hay temperamentos seleccionados, se filtran las razas según estos temperamentos.\n      // Dependiendo del modo de filtrado (and / or), se utilizan diferentes lógicas de filtrado.\n    } else {\n      const filteredBreedsByTemperament = breeds.filter(breed => {\n        var _breed$temperament;\n        const breedTemperaments = (_breed$temperament = breed.temperament) === null || _breed$temperament === void 0 ? void 0 : _breed$temperament.split(', ');\n        if (mode === \"and\") {\n          // Retorna las razas que incluyan a todos los temperamentos seleccionados\n          return selectedTemperaments.every(temperament => breedTemperaments === null || breedTemperaments === void 0 ? void 0 : breedTemperaments.includes(temperament));\n        } else if (mode === \"or\" && selectedTemperaments.length === 0) {\n          return true;\n        } else if (mode === \"or\" && selectedTemperaments.length > 0) {\n          // Retorna las razas que incluyan al menos uno de los temperamentos seleccionados\n          return selectedTemperaments.some(temperament => breedTemperaments === null || breedTemperaments === void 0 ? void 0 : breedTemperaments.includes(temperament));\n        }\n        return true;\n      });\n\n      // Una vez filtradas las razas por temperamentos se procede a filtrar por la fuente de la raza\n      const filteredBreedsByIdType = filteredBreedsByTemperament.filter(breed => {\n        const breedId = breed.id;\n\n        //Si el source selector es de tipo number; se mostraran las razas de la API (Tipo de ID: number)\n        if (source === \"number\") {\n          setActiveSort(\"nameAsc\");\n          setCurrentPage(1);\n          return typeof breedId === \"number\";\n\n          //Si el source selector es de tipo string; se mostraran las razas de la DB (Tipo de ID: string)\n        } else if (source === \"string\") {\n          setActiveSort(\"nameAsc\");\n          setCurrentPage(1);\n          return typeof breedId === \"string\";\n        } else {\n          setActiveSort(\"nameAsc\");\n          setCurrentPage(1);\n          return true;\n        }\n      });\n      setActiveSort(\"nameAsc\");\n      setCurrentPage(1);\n\n      //Por ultimo se establecen como razas filtradas las razas que retornan true luego de haber pasado por todo el sistema de filtrado\n      setFilteredBreeds(filteredBreedsByIdType.filter(breed => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\n    }\n  }, [selectedTemperaments, source, searchTerm, breeds, mode]);\n\n  //================================================= Seccion Ordenamientos de razas =======================================================================\n\n  // En esta seccion se muestran los handlers para los ordenamientos de las razas\n\n  // Localcompare indica si una string es menor o mayor que otra segun su orden lexicografico\n\n  // [...filteredBreeds] es una copia superficial (shallow copy) de filteredBreeds.\n  // La razón por la que se utiliza una copia superficial en este caso es porque la función sort() es un método destructivo, \n  // lo que significa que modifica directamente el array sobre el que se llama en lugar de crear un nuevo array ordenado. \n  // Al hacer una copia superficial antes de ordenar, se evita modificar directamente el array original y se garantiza que los \n  // cambios se realicen en el nuevo array sortedBreeds.\n\n  const sortDogsByNameAsc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => a.name.localeCompare(b.name));\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"nameAsc\");\n  };\n  const sortDogsByNameDesc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => b.name.localeCompare(a.name));\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"nameDesc\");\n  };\n  const sortDogsByWeightAsc = () => {\n    const sortedBreeds = filteredBreeds.sort((a, b) => {\n      return getAverageWeight(a.weight) - getAverageWeight(b.weight);\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"weightAsc\");\n  };\n  const sortDogsByWeightDesc = () => {\n    const sortedBreeds = filteredBreeds.sort((a, b) => {\n      return getAverageWeight(b.weight) - getAverageWeight(a.weight);\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"weightDesc\");\n  };\n  const sortDogsByLifespanAsc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => {\n      const aLifespan = getAverageLifeSpan(a.life_span);\n      const bLifespan = getAverageLifeSpan(b.life_span);\n      return aLifespan - bLifespan;\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"lifespanAsc\");\n  };\n  const sortDogsByLifespanDesc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => {\n      const aLifespan = getAverageLifeSpan(a.life_span);\n      const bLifespan = getAverageLifeSpan(b.life_span);\n      return bLifespan - aLifespan;\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"lifespanDesc\");\n  };\n\n  //===================================================== Finalizacion ordenamientos ==========================================================\n\n  if (breeds.length === 0) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bodyHome\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchBar\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by name\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sortBar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"nameAsc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByNameAsc,\n          children: \"A-Z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"nameDesc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByNameDesc,\n          children: \"Z-A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"weightAsc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByWeightAsc,\n          children: \"Weight (asc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"weightDesc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByWeightDesc,\n          children: \"Weight (desc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"lifespanAsc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByLifespanAsc,\n          children: \"Life Span (asc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"lifespanDesc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByLifespanDesc,\n          children: \"Life Span (desc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Breeds, {\n        breeds: currentResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => previousPage(),\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), Array.from({\n          length: totalPages\n        }, (_, i) => i + 1).map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick(page),\n          className: page === currentPage ? \"active\" : \"\",\n          children: page\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => nextPage(),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Home, \"c5THd18XlTcjwuBheKo6vieZxls=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useSelector","useDispatch","useEffect","useState","getAllDogs","getAverageLifeSpan","getAverageWeight","LoadingScreen","NavBar","Breeds","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","dispatch","searchTerm","setSearchTerm","filteredBreeds","setFilteredBreeds","selectedTemperaments","setSelectedTemperaments","currentPage","setCurrentPage","resultsPerPage","setResultsPerPage","activeSort","setActiveSort","breeds","state","dogs","temperaments","source","selectedIdType","mode","selectedMode","console","log","length","indexOfLastResult","indexOfFirstResult","currentResults","slice","totalPages","Math","ceil","nextPage","previousPage","handleClick","pageNumber","filter","breed","name","toLowerCase","includes","filteredBreedsByTemperament","_breed$temperament","breedTemperaments","temperament","split","every","some","filteredBreedsByIdType","breedId","id","sortDogsByNameAsc","sortedBreeds","sort","a","b","localeCompare","sortDogsByNameDesc","sortDogsByWeightAsc","weight","sortDogsByWeightDesc","sortDogsByLifespanAsc","aLifespan","life_span","bLifespan","sortDogsByLifespanDesc","fileName","_jsxFileName","lineNumber","columnNumber","children","className","type","placeholder","value","onChange","e","target","onClick","Array","from","_","i","map","page","_c","$RefreshReg$"],"sources":["C:/Users/j-aco/OneDrive/Escritorio/DoggoApi/PI-Dogs-main/client/src/Components/Home/Home.jsx"],"sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAllDogs } from \"../../Redux/actions\";\r\nimport { getAverageLifeSpan, getAverageWeight } from \"../../Utils/GetAverageFunctions\"\r\nimport LoadingScreen from \"../LoadingScreen/LoadingScreen\"\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport Breeds from \"../Breeds/Breeds\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport \"./Home.modules.css\"\r\n\r\n  \r\n/*--------------------------------------------------------------------*/\r\n\r\nconst Home = () => {\r\n\r\n    const dispatch = useDispatch(); \r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\"); // Término de busqueda\r\n    const [filteredBreeds, setFilteredBreeds] = useState([]); // Razas filtradas por temperamentos\r\n    const [selectedTemperaments, setSelectedTemperaments] = useState([]) // Temperamentos seleccionados\r\n    const [currentPage, setCurrentPage] = useState(1); // Selector de pagina\r\n    const [resultsPerPage, setResultsPerPage] = useState(8); // Elementos mostrados en pagina\r\n    const [activeSort, setActiveSort] = useState(\"nameAsc\"); // Selector de ordenamiento\r\n\r\n    const breeds = useSelector((state) => state.dogs); // Se traen del estado global las razas de perros\r\n    const temperaments = useSelector((state) => state.selectedTemperaments) // Se traen del estado global los temperamentos seleccionados en el componente NavBar\r\n    const source = useSelector((state) => state.selectedIdType) // Selector del tipo de fuente (API, DB, ALL), se trae del estado global\r\n    const mode = useSelector((state) => state.selectedMode) // Selector de OR o AND, se trae del estado global\r\n\r\n    console.log(breeds.length)\r\n    \r\n    //===================================== Paginador ========================================\r\n\r\n    // IndexOfLastResult: es el índice del último elemento de la página actual y se calcula multiplicando el número de \r\n    // la página actual por el número de resultados por página.\r\n    const indexOfLastResult = currentPage * resultsPerPage;\r\n\r\n    // IndexOfFirstResult: es el índice del primer elemento de la página actual y se calcula restando el número de resultados \r\n    // por página del índice del último resultado de la página actual.\r\n    const indexOfFirstResult = indexOfLastResult - resultsPerPage; \r\n\r\n    // CurrentResults: es un arreglo que contiene los elementos de la página actual, que se obtiene al cortar el arreglo filteredBreeds desde \r\n    // el índice del primer resultado hasta el índice del último resultado de la página actual.\r\n    const currentResults = filteredBreeds.slice(indexOfFirstResult, indexOfLastResult);\r\n\r\n    // TotalPages: es el número total de páginas que se necesitan para mostrar todos los elementos de filteredBreeds, que se obtiene dividiendo \r\n    // la longitud del arreglo filteredBreeds por el número de resultados por página y redondeando hacia arriba con la función Math.ceil().\r\n    const totalPages = Math.ceil(filteredBreeds.length / resultsPerPage); \r\n    \r\n    // Se aumenta de pagina\r\n    const nextPage = () => {\r\n      if (currentPage < totalPages) { // Solo se aumenta si la pagina actual es menor a la cantidad total de paginas\r\n        setCurrentPage(currentPage + 1);\r\n      }\r\n    };\r\n    \r\n    // Se retrocede de pagina\r\n    const previousPage = () => {\r\n      if (currentPage > 1) { // Solo se retrocede siempre y cuando la pagina actual sea mayor que 1\r\n        setCurrentPage(currentPage - 1);\r\n      }\r\n    };\r\n    \r\n    // Se setea la pagina en la que se haya hecho click\r\n    const handleClick = (pageNumber) => {\r\n        setCurrentPage(pageNumber); \r\n      }\r\n    \r\n      \r\n      //===================================== UseEffects ========================================\r\n\r\n    // Se suben al array del estado global los perros recibidos con la funcion getAllDogs\r\n    useEffect(() => {\r\n        dispatch(getAllDogs());\r\n    }, []);\r\n    \r\n    // Este useEffect no tiene array de dependencias porque se tiene que ejecutar cada que se actualiza un temperamento en el estado global, \r\n    // Si tuviera un array de dependencias solo se renderizaria una sola vez, y no cada que se actualizan los temperamentos seleccionados\r\n    useEffect(() => {\r\n        setSelectedTemperaments(temperaments)\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        if (selectedTemperaments.length === 0 && source === \"all\") {\r\n          setActiveSort(\"nameAsc\")\r\n          setCurrentPage(1)\r\n          setFilteredBreeds(breeds.filter((breed) => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\r\n\r\n        // Si hay temperamentos seleccionados, se filtran las razas según estos temperamentos.\r\n        // Dependiendo del modo de filtrado (and / or), se utilizan diferentes lógicas de filtrado.\r\n\r\n        } else {\r\n          const filteredBreedsByTemperament = breeds.filter((breed) => {\r\n            const breedTemperaments = breed.temperament?.split(', ');\r\n            if (mode === \"and\") {\r\n              // Retorna las razas que incluyan a todos los temperamentos seleccionados\r\n              return selectedTemperaments.every((temperament) => breedTemperaments?.includes(temperament));\r\n            } else if (mode === \"or\" && selectedTemperaments.length === 0) {\r\n              return true;\r\n            } else if (mode === \"or\" && selectedTemperaments.length > 0){\r\n              // Retorna las razas que incluyan al menos uno de los temperamentos seleccionados\r\n              return selectedTemperaments.some((temperament) => breedTemperaments?.includes(temperament));\r\n            }\r\n            return true;\r\n          });\r\n\r\n          // Una vez filtradas las razas por temperamentos se procede a filtrar por la fuente de la raza\r\n          const filteredBreedsByIdType = filteredBreedsByTemperament.filter((breed) => {\r\n            const breedId = breed.id;\r\n\r\n            //Si el source selector es de tipo number; se mostraran las razas de la API (Tipo de ID: number)\r\n            if (source === \"number\") {\r\n              setActiveSort(\"nameAsc\")\r\n              setCurrentPage(1)\r\n              return typeof breedId === \"number\";\r\n\r\n            //Si el source selector es de tipo string; se mostraran las razas de la DB (Tipo de ID: string)\r\n            } else if (source === \"string\") {\r\n              setActiveSort(\"nameAsc\")\r\n              setCurrentPage(1)\r\n              return typeof breedId === \"string\";\r\n            } else {\r\n            \r\n              setActiveSort(\"nameAsc\")\r\n              setCurrentPage(1)\r\n              return true;\r\n            }\r\n          });\r\n          setActiveSort(\"nameAsc\")\r\n          setCurrentPage(1)\r\n\r\n          //Por ultimo se establecen como razas filtradas las razas que retornan true luego de haber pasado por todo el sistema de filtrado\r\n          setFilteredBreeds(filteredBreedsByIdType.filter((breed) => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\r\n        }\r\n    }, [selectedTemperaments, source, searchTerm, breeds, mode]);\r\n\r\n\r\n    //================================================= Seccion Ordenamientos de razas =======================================================================\r\n\r\n        // En esta seccion se muestran los handlers para los ordenamientos de las razas\r\n\r\n        // Localcompare indica si una string es menor o mayor que otra segun su orden lexicografico\r\n\r\n        // [...filteredBreeds] es una copia superficial (shallow copy) de filteredBreeds.\r\n        // La razón por la que se utiliza una copia superficial en este caso es porque la función sort() es un método destructivo, \r\n        // lo que significa que modifica directamente el array sobre el que se llama en lugar de crear un nuevo array ordenado. \r\n        // Al hacer una copia superficial antes de ordenar, se evita modificar directamente el array original y se garantiza que los \r\n        // cambios se realicen en el nuevo array sortedBreeds.\r\n\r\n    const sortDogsByNameAsc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => a.name.localeCompare(b.name));\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"nameAsc\");\r\n    };\r\n    \r\n    const sortDogsByNameDesc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => b.name.localeCompare(a.name));\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"nameDesc\");\r\n    };\r\n    \r\n    const sortDogsByWeightAsc = () => {\r\n      const sortedBreeds = filteredBreeds.sort((a, b) => {\r\n        return getAverageWeight(a.weight) - getAverageWeight(b.weight);\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"weightAsc\");\r\n    };\r\n\r\n    const sortDogsByWeightDesc = () => {\r\n      const sortedBreeds = filteredBreeds.sort((a, b) => {\r\n        return getAverageWeight(b.weight) - getAverageWeight(a.weight);\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"weightDesc\");\r\n    };\r\n\r\n    const sortDogsByLifespanAsc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => {\r\n        const aLifespan = getAverageLifeSpan(a.life_span);\r\n        const bLifespan = getAverageLifeSpan(b.life_span);\r\n        return aLifespan - bLifespan;\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"lifespanAsc\");\r\n    };\r\n    \r\n    const sortDogsByLifespanDesc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => {\r\n        const aLifespan = getAverageLifeSpan(a.life_span);\r\n        const bLifespan = getAverageLifeSpan(b.life_span);\r\n        return bLifespan - aLifespan;\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"lifespanDesc\");\r\n    };\r\n\r\n    //===================================================== Finalizacion ordenamientos ==========================================================\r\n\r\n    if (breeds.length === 0) {\r\n        return <LoadingScreen />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bodyHome\">\r\n\r\n                <NavBar />\r\n\r\n                <div className=\"searchBar\">\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Search by name\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"sortBar\">\r\n\r\n                  <button className = {`sortButton ${activeSort === \"nameAsc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByNameAsc}\r\n                  >\r\n                    A-Z\r\n                  </button>\r\n                  \r\n                  <button className = {`sortButton ${activeSort === \"nameDesc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByNameDesc}\r\n                  >\r\n                    Z-A\r\n                  </button>\r\n\r\n                  <button className = {`sortButton ${activeSort === \"weightAsc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByWeightAsc}\r\n                  >\r\n                    Weight (asc)\r\n                  </button>\r\n\r\n                  <button className = {`sortButton ${activeSort === \"weightDesc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByWeightDesc}\r\n                  >\r\n                    Weight (desc)\r\n                  </button> \r\n\r\n                  <button className={`sortButton ${activeSort === \"lifespanAsc\" ? \"active\" : \"\"}`} \r\n                    onClick={sortDogsByLifespanAsc}>\r\n                    Life Span (asc)\r\n                  </button>\r\n\r\n                  <button className={`sortButton ${activeSort === \"lifespanDesc\" ? \"active\" : \"\"}`} \r\n                    onClick={sortDogsByLifespanDesc}>\r\n                    Life Span (desc)\r\n                  </button>\r\n\r\n\r\n                </div>\r\n\r\n                <Breeds breeds={currentResults}/>\r\n\r\n\r\n                \r\n                <div className=\"pagination\">\r\n\r\n                    <button onClick={() => previousPage()}>\r\n                        Prev\r\n                    </button>\r\n\r\n                    {/* Se crea un array de la totalidad de las paginas, y con el metodo map se crea un boton por cada elemento en dicho array. */}\r\n                    {/* (_, i) se utiliza para ignorar el primer argimento (por convencion) y utilizar solo el segundi (i), el cual se utiliza para generar\r\n                    numeros de pagina consecutivos comenzando desde la pagina 1 */}\r\n\r\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\r\n                        <button key={page} onClick={() => handleClick(page)} className={page === currentPage ? \"active\" : \"\"}>\r\n                            {page}\r\n                        </button>\r\n                    ))}\r\n\r\n                    <button onClick={() => nextPage()}>\r\n                        Next\r\n                    </button>\r\n\r\n                </div>\r\n                \r\n                <Footer />\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}