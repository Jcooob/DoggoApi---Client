{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\j-aco\\\\OneDrive\\\\Escritorio\\\\DoggoApi\\\\PI-Dogs-main\\\\client\\\\src\\\\Components\\\\Home\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { getAllDogs } from \"../../Redux/actions\";\nimport { getAverageLifeSpan, getAverageWeight } from \"../../Utils/GetAverageFunctions\";\nimport LoadingScreen from \"../LoadingScreen/LoadingScreen\";\nimport NavBar from \"../NavBar/NavBar\";\nimport Breeds from \"../Breeds/Breeds\";\nimport Footer from \"../Footer/Footer\";\nimport \"./Home.modules.css\";\n\n/*--------------------------------------------------------------------*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredBreeds, setFilteredBreeds] = useState([]);\n  const [selectedTemperaments, setSelectedTemperaments] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [resultsPerPage, setResultsPerPage] = useState(8);\n  const [activeSort, setActiveSort] = useState(\"nameAsc\");\n  const breeds = useSelector(state => state.dogs);\n  const temperaments = useSelector(state => state.selectedTemperaments);\n  const source = useSelector(state => state.selectedIdType);\n  const mode = useSelector(state => state.selectedMode);\n\n  //===================================== Paginador ========================================\n  const indexOfLastResult = currentPage * resultsPerPage;\n  const indexOfFirstResult = indexOfLastResult - resultsPerPage;\n  const currentResults = filteredBreeds.slice(indexOfFirstResult, indexOfLastResult);\n  const totalPages = Math.ceil(filteredBreeds.length / resultsPerPage);\n  const nextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n  const previousPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n  const handleClick = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  // Se suben al array del estado global los perros recibidos con la funcion getAllDogs\n  useEffect(() => {\n    dispatch(getAllDogs());\n  }, []);\n\n  // Este useEffect no tiene array de dependencias porque se tiene que ejecutar cada que\n  // se actualiza en el estado global\n  useEffect(() => {\n    setSelectedTemperaments(temperaments);\n  });\n  useEffect(() => {\n    // Si no hay ningún temperamento seleccionado y la fuente es \"all\", se establece\n    // el orden activo en \"nameAsc\" y se filtran las razas según el término de búsqueda.\n\n    if (selectedTemperaments.length === 0 && source === \"all\") {\n      setActiveSort(\"nameAsc\");\n\n      //Si no hay temperamentos seleccionados y la fuente es \"all\", el unico \"filtro\" activo es el de la search bar\n      //El metodo filter devuelve un nuevo array con los elementos que cumplan con determinada condicion\n      //Se evalua si el nombre de la raza convertido a minuscula incluye el termino introducido en la search bar convertido a minuscula\n      //Con el metodo includes, si esto se cumple devuelve true, sino false. De esta manera se eliminan los perros que no cumplan con dicha condicion.\n      //El método includes() devuelve true si la cadena de texto especificada está contenida en la cadena que se está evaluando, y false si no lo está.\n      setFilteredBreeds(breeds.filter(breed => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\n\n      // Si hay temperamentos seleccionados, se filtran las razas según estos temperamentos.\n      // Dependiendo del modo de filtrado (and / or), se utilizan diferentes lógicas de filtrado.\n    } else {\n      const filteredBreedsByTemperament = breeds.filter(breed => {\n        var _breed$temperament;\n        //Se separan los temperamentos de la raza (los cuales estan en una string separados por comas)\n\n        const breedTemperaments = (_breed$temperament = breed.temperament) === null || _breed$temperament === void 0 ? void 0 : _breed$temperament.split(', ');\n\n        //Si el modo es \"and\" con el metodo every solo las razas que cumplan con todos los \n        //temperamentos seleccionados (selectedTemperaments) retornaran true.\n        if (mode === \"and\") {\n          return selectedTemperaments.every(temperament => breedTemperaments === null || breedTemperaments === void 0 ? void 0 : breedTemperaments.includes(temperament));\n\n          //Si el modo es \"or\" y NO hay temperamentos seleccionados todas las razas retornaran true.\n        } else if (mode === \"or\" && selectedTemperaments.length === 0) {\n          return true;\n\n          //Si el modo es \"or\" y SI hay temperamentos seleccionados todas las razas que al menos cumplan\n          //con un temperamento seleccionado daran true.\n        } else if (mode === \"or\" && selectedTemperaments.length > 0) {\n          return selectedTemperaments.some(temperament => breedTemperaments === null || breedTemperaments === void 0 ? void 0 : breedTemperaments.includes(temperament));\n        }\n        //Si no todo retornara true.\n        return true;\n      });\n\n      //Ahora se procede a filtrar por la fuente de la raza\n      const filteredBreedsByIdType = filteredBreedsByTemperament.filter(breed => {\n        const breedId = breed.id;\n\n        //Por cada raza filtrada por temperamento se realiza este proceso, solo retornan true las razas cuyo tipo de id\n        //sea el seleccionado por el usuario. Las razas que retornan false (que no superan los filtros) no se muestran.\n\n        //Si el source selector es de tipo number; se mostraran las razas de la API\n        if (source === \"number\") {\n          setActiveSort(\"nameAsc\");\n          setCurrentPage(1);\n          return typeof breedId === \"number\";\n\n          //Si el source selector es de tipo string; se mostraran las razas de la DB\n        } else if (source === \"string\") {\n          setActiveSort(\"nameAsc\");\n          setCurrentPage(1);\n          return typeof breedId === \"string\";\n        } else {\n          //Si el source selector es ALL se mostraran todas las razas ya que todas retornaran true\n          setActiveSort(\"nameAsc\");\n          setCurrentPage(1);\n          return true;\n        }\n      });\n      setActiveSort(\"nameAsc\");\n      setCurrentPage(1);\n\n      //Por ultimo se setean como razas filtradas las razas que cumplan con el contenido de la searchBar, que funciona igual que los filtros anteriores\n      setFilteredBreeds(filteredBreedsByIdType.filter(breed => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\n    }\n  }, [selectedTemperaments, source, searchTerm, breeds, mode]);\n\n  //================================================= Seccion Ordenamientos de razas =======================================================================\n\n  // En esta seccion se muestran los handlers para los ordenamientos de las razas\n\n  // Localcompare indica si una string es menor o mayor que otra segun su orden lexicografico\n\n  // [...filteredBreeds] es una copia superficial (shallow copy) de filteredBreeds.\n  // La razón por la que se utiliza una copia superficial en este caso es porque la función sort() es un método destructivo, \n  // lo que significa que modifica directamente el array sobre el que se llama en lugar de crear un nuevo array ordenado. \n  // Al hacer una copia superficial antes de ordenar, se evita modificar directamente el array original y se garantiza que los \n  // cambios se realicen en el nuevo array sortedBreeds.\n\n  const sortDogsByNameAsc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => a.name.localeCompare(b.name));\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"nameAsc\");\n  };\n  const sortDogsByNameDesc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => b.name.localeCompare(a.name));\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"nameDesc\");\n  };\n  const sortDogsByWeightAsc = () => {\n    const sortedBreeds = filteredBreeds.sort((a, b) => {\n      return getAverageWeight(a.weight) - getAverageWeight(b.weight);\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"weightAsc\");\n  };\n  const sortDogsByWeightDesc = () => {\n    const sortedBreeds = filteredBreeds.sort((a, b) => {\n      return getAverageWeight(b.weight) - getAverageWeight(a.weight);\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"weightDesc\");\n  };\n  const sortDogsByLifespanAsc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => {\n      const aLifespan = getAverageLifeSpan(a.life_span);\n      const bLifespan = getAverageLifeSpan(b.life_span);\n      return aLifespan - bLifespan;\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"lifespanAsc\");\n  };\n  const sortDogsByLifespanDesc = () => {\n    const sortedBreeds = [...filteredBreeds].sort((a, b) => {\n      const aLifespan = getAverageLifeSpan(a.life_span);\n      const bLifespan = getAverageLifeSpan(b.life_span);\n      return bLifespan - aLifespan;\n    });\n    setFilteredBreeds(sortedBreeds);\n    setActiveSort(\"lifespanDesc\");\n  };\n\n  //===================================================== Finalizacion ordenamientos ==========================================================\n\n  if (breeds.length === 0) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bodyHome\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchBar\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by name\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sortBar\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"nameAsc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByNameAsc,\n          children: \"A-Z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"nameDesc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByNameDesc,\n          children: \"Z-A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"weightAsc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByWeightAsc,\n          children: \"Weight (asc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"weightDesc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByWeightDesc,\n          children: \"Weight (desc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"lifespanAsc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByLifespanAsc,\n          children: \"Life Span (asc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `sortButton ${activeSort === \"lifespanDesc\" ? \"active\" : \"\"}`,\n          onClick: sortDogsByLifespanDesc,\n          children: \"Life Span (desc)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Breeds, {\n        breeds: currentResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => previousPage(),\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), Array.from({\n          length: totalPages\n        }, (_, i) => i + 1).map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick(page),\n          className: page === currentPage ? \"active\" : \"\",\n          children: page\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => nextPage(),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Home, \"c5THd18XlTcjwuBheKo6vieZxls=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useSelector","useDispatch","useEffect","useState","getAllDogs","getAverageLifeSpan","getAverageWeight","LoadingScreen","NavBar","Breeds","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","dispatch","searchTerm","setSearchTerm","filteredBreeds","setFilteredBreeds","selectedTemperaments","setSelectedTemperaments","currentPage","setCurrentPage","resultsPerPage","setResultsPerPage","activeSort","setActiveSort","breeds","state","dogs","temperaments","source","selectedIdType","mode","selectedMode","indexOfLastResult","indexOfFirstResult","currentResults","slice","totalPages","Math","ceil","length","nextPage","previousPage","handleClick","pageNumber","filter","breed","name","toLowerCase","includes","filteredBreedsByTemperament","_breed$temperament","breedTemperaments","temperament","split","every","some","filteredBreedsByIdType","breedId","id","sortDogsByNameAsc","sortedBreeds","sort","a","b","localeCompare","sortDogsByNameDesc","sortDogsByWeightAsc","weight","sortDogsByWeightDesc","sortDogsByLifespanAsc","aLifespan","life_span","bLifespan","sortDogsByLifespanDesc","fileName","_jsxFileName","lineNumber","columnNumber","children","className","type","placeholder","value","onChange","e","target","onClick","Array","from","_","i","map","page","_c","$RefreshReg$"],"sources":["C:/Users/j-aco/OneDrive/Escritorio/DoggoApi/PI-Dogs-main/client/src/Components/Home/Home.jsx"],"sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAllDogs } from \"../../Redux/actions\";\r\nimport { getAverageLifeSpan, getAverageWeight } from \"../../Utils/GetAverageFunctions\"\r\nimport LoadingScreen from \"../LoadingScreen/LoadingScreen\"\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport Breeds from \"../Breeds/Breeds\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport \"./Home.modules.css\"\r\n\r\n  \r\n/*--------------------------------------------------------------------*/\r\n\r\nconst Home = () => {\r\n\r\n    const dispatch = useDispatch(); \r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [filteredBreeds, setFilteredBreeds] = useState([]);\r\n    const [selectedTemperaments, setSelectedTemperaments] = useState([])\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [resultsPerPage, setResultsPerPage] = useState(8);\r\n    const [activeSort, setActiveSort] = useState(\"nameAsc\");\r\n\r\n    const breeds = useSelector((state) => state.dogs);\r\n    const temperaments = useSelector((state) => state.selectedTemperaments)\r\n    const source = useSelector((state) => state.selectedIdType)\r\n    const mode = useSelector((state) => state.selectedMode)\r\n    \r\n    //===================================== Paginador ========================================\r\n    const indexOfLastResult = currentPage * resultsPerPage;\r\n    const indexOfFirstResult = indexOfLastResult - resultsPerPage;\r\n    const currentResults = filteredBreeds.slice(indexOfFirstResult, indexOfLastResult);\r\n    const totalPages = Math.ceil(filteredBreeds.length / resultsPerPage);\r\n    \r\n    const nextPage = () => {\r\n      if (currentPage < totalPages) {\r\n        setCurrentPage(currentPage + 1);\r\n      }\r\n    };\r\n    \r\n    const previousPage = () => {\r\n      if (currentPage > 1) {\r\n        setCurrentPage(currentPage - 1);\r\n      }\r\n    };\r\n    \r\n    const handleClick = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n      }\r\n      \r\n    // Se suben al array del estado global los perros recibidos con la funcion getAllDogs\r\n    useEffect(() => {\r\n        dispatch(getAllDogs());\r\n    }, []);\r\n    \r\n    // Este useEffect no tiene array de dependencias porque se tiene que ejecutar cada que\r\n    // se actualiza en el estado global\r\n    useEffect(() => {\r\n        setSelectedTemperaments(temperaments)\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n      // Si no hay ningún temperamento seleccionado y la fuente es \"all\", se establece\r\n      // el orden activo en \"nameAsc\" y se filtran las razas según el término de búsqueda.\r\n\r\n        if (selectedTemperaments.length === 0 && source === \"all\") {\r\n          setActiveSort(\"nameAsc\")\r\n\r\n          //Si no hay temperamentos seleccionados y la fuente es \"all\", el unico \"filtro\" activo es el de la search bar\r\n          //El metodo filter devuelve un nuevo array con los elementos que cumplan con determinada condicion\r\n          //Se evalua si el nombre de la raza convertido a minuscula incluye el termino introducido en la search bar convertido a minuscula\r\n          //Con el metodo includes, si esto se cumple devuelve true, sino false. De esta manera se eliminan los perros que no cumplan con dicha condicion.\r\n          //El método includes() devuelve true si la cadena de texto especificada está contenida en la cadena que se está evaluando, y false si no lo está.\r\n          setFilteredBreeds(breeds.filter((breed) => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\r\n\r\n        // Si hay temperamentos seleccionados, se filtran las razas según estos temperamentos.\r\n        // Dependiendo del modo de filtrado (and / or), se utilizan diferentes lógicas de filtrado.\r\n\r\n        } else {\r\n          const filteredBreedsByTemperament = breeds.filter((breed) => {\r\n\r\n            //Se separan los temperamentos de la raza (los cuales estan en una string separados por comas)\r\n\r\n            const breedTemperaments = breed.temperament?.split(', ');\r\n\r\n            //Si el modo es \"and\" con el metodo every solo las razas que cumplan con todos los \r\n            //temperamentos seleccionados (selectedTemperaments) retornaran true.\r\n            if (mode === \"and\") {\r\n              return selectedTemperaments.every((temperament) => breedTemperaments?.includes(temperament));\r\n\r\n            //Si el modo es \"or\" y NO hay temperamentos seleccionados todas las razas retornaran true.\r\n            } else if (mode === \"or\" && selectedTemperaments.length === 0) {\r\n              return true;\r\n              \r\n            //Si el modo es \"or\" y SI hay temperamentos seleccionados todas las razas que al menos cumplan\r\n            //con un temperamento seleccionado daran true.\r\n            } else if (mode === \"or\" && selectedTemperaments.length > 0){\r\n              return selectedTemperaments.some((temperament) => breedTemperaments?.includes(temperament));\r\n            }\r\n            //Si no todo retornara true.\r\n            return true;\r\n          });\r\n\r\n          //Ahora se procede a filtrar por la fuente de la raza\r\n          const filteredBreedsByIdType = filteredBreedsByTemperament.filter((breed) => {\r\n            const breedId = breed.id;\r\n\r\n            //Por cada raza filtrada por temperamento se realiza este proceso, solo retornan true las razas cuyo tipo de id\r\n            //sea el seleccionado por el usuario. Las razas que retornan false (que no superan los filtros) no se muestran.\r\n\r\n            //Si el source selector es de tipo number; se mostraran las razas de la API\r\n            if (source === \"number\") {\r\n              setActiveSort(\"nameAsc\")\r\n              setCurrentPage(1)\r\n              return typeof breedId === \"number\";\r\n\r\n            //Si el source selector es de tipo string; se mostraran las razas de la DB\r\n            } else if (source === \"string\") {\r\n              setActiveSort(\"nameAsc\")\r\n              setCurrentPage(1)\r\n              return typeof breedId === \"string\";\r\n            } else {\r\n            \r\n            //Si el source selector es ALL se mostraran todas las razas ya que todas retornaran true\r\n              setActiveSort(\"nameAsc\")\r\n              setCurrentPage(1)\r\n              return true;\r\n            }\r\n          });\r\n          setActiveSort(\"nameAsc\")\r\n          setCurrentPage(1)\r\n\r\n          //Por ultimo se setean como razas filtradas las razas que cumplan con el contenido de la searchBar, que funciona igual que los filtros anteriores\r\n          setFilteredBreeds(filteredBreedsByIdType.filter((breed) => breed.name.toLowerCase().includes(searchTerm.toLowerCase())));\r\n        }\r\n    }, [selectedTemperaments, source, searchTerm, breeds, mode]);\r\n\r\n\r\n    //================================================= Seccion Ordenamientos de razas =======================================================================\r\n\r\n        // En esta seccion se muestran los handlers para los ordenamientos de las razas\r\n\r\n        // Localcompare indica si una string es menor o mayor que otra segun su orden lexicografico\r\n\r\n        // [...filteredBreeds] es una copia superficial (shallow copy) de filteredBreeds.\r\n        // La razón por la que se utiliza una copia superficial en este caso es porque la función sort() es un método destructivo, \r\n        // lo que significa que modifica directamente el array sobre el que se llama en lugar de crear un nuevo array ordenado. \r\n        // Al hacer una copia superficial antes de ordenar, se evita modificar directamente el array original y se garantiza que los \r\n        // cambios se realicen en el nuevo array sortedBreeds.\r\n\r\n    const sortDogsByNameAsc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => a.name.localeCompare(b.name));\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"nameAsc\");\r\n    };\r\n    \r\n    const sortDogsByNameDesc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => b.name.localeCompare(a.name));\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"nameDesc\");\r\n    };\r\n    \r\n    const sortDogsByWeightAsc = () => {\r\n      const sortedBreeds = filteredBreeds.sort((a, b) => {\r\n        return getAverageWeight(a.weight) - getAverageWeight(b.weight);\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"weightAsc\");\r\n    };\r\n\r\n    const sortDogsByWeightDesc = () => {\r\n      const sortedBreeds = filteredBreeds.sort((a, b) => {\r\n        return getAverageWeight(b.weight) - getAverageWeight(a.weight);\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"weightDesc\");\r\n    };\r\n\r\n    const sortDogsByLifespanAsc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => {\r\n        const aLifespan = getAverageLifeSpan(a.life_span);\r\n        const bLifespan = getAverageLifeSpan(b.life_span);\r\n        return aLifespan - bLifespan;\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"lifespanAsc\");\r\n    };\r\n    \r\n    const sortDogsByLifespanDesc = () => {\r\n      const sortedBreeds = [...filteredBreeds].sort((a, b) => {\r\n        const aLifespan = getAverageLifeSpan(a.life_span);\r\n        const bLifespan = getAverageLifeSpan(b.life_span);\r\n        return bLifespan - aLifespan;\r\n      });\r\n      setFilteredBreeds(sortedBreeds);\r\n      setActiveSort(\"lifespanDesc\");\r\n    };\r\n\r\n    //===================================================== Finalizacion ordenamientos ==========================================================\r\n    \r\n\r\n\r\n    if (breeds.length === 0) {\r\n        return <LoadingScreen />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bodyHome\">\r\n\r\n                <NavBar />\r\n\r\n                <div className=\"searchBar\">\r\n                    <input \r\n                        type=\"text\"\r\n                        placeholder=\"Search by name\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"sortBar\">\r\n\r\n                  <button className = {`sortButton ${activeSort === \"nameAsc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByNameAsc}\r\n                  >\r\n                    A-Z\r\n                  </button>\r\n                  \r\n                  <button className = {`sortButton ${activeSort === \"nameDesc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByNameDesc}\r\n                  >\r\n                    Z-A\r\n                  </button>\r\n\r\n                  <button className = {`sortButton ${activeSort === \"weightAsc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByWeightAsc}\r\n                  >\r\n                    Weight (asc)\r\n                  </button>\r\n\r\n                  <button className = {`sortButton ${activeSort === \"weightDesc\" ? \"active\" : \"\"}`}\r\n                    onClick={sortDogsByWeightDesc}\r\n                  >\r\n                    Weight (desc)\r\n                  </button> \r\n\r\n                  <button className={`sortButton ${activeSort === \"lifespanAsc\" ? \"active\" : \"\"}`} \r\n                    onClick={sortDogsByLifespanAsc}>\r\n                    Life Span (asc)\r\n                  </button>\r\n\r\n                  <button className={`sortButton ${activeSort === \"lifespanDesc\" ? \"active\" : \"\"}`} \r\n                    onClick={sortDogsByLifespanDesc}>\r\n                    Life Span (desc)\r\n                  </button>\r\n\r\n\r\n                </div>\r\n\r\n                <Breeds breeds={currentResults}/>\r\n\r\n\r\n                \r\n                <div className=\"pagination\">\r\n\r\n                    <button onClick={() => previousPage()}>\r\n                        Prev\r\n                    </button>\r\n\r\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\r\n                        <button key={page} onClick={() => handleClick(page)} className={page === currentPage ? \"active\" : \"\"}>\r\n                            {page}\r\n                        </button>\r\n                    ))}\r\n\r\n                    <button onClick={() => nextPage()}>\r\n                        Next\r\n                    </button>\r\n\r\n                </div>\r\n                \r\n                <Footer />\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}