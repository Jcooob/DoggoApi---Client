{"ast":null,"code":"function getAverageWeight(weight) {\n  if (typeof weight === \"object\" && weight.metric) {\n    if (weight.metric === NaN) {\n      return 20;\n    } else {\n      const weightArray = weight.metric.split(\" - \") || weight.metric.split(\" – \");\n      if (weightArray.length > 1) {\n        const averageWeightInKg = (parseFloat(weightArray[0]) + parseFloat(weightArray[1])) / 2;\n        return Math.round(averageWeightInKg * 10) / 10;\n      } else {\n        const weightInKg = parseFloat(weight.metric);\n        return Math.round(weightInKg * 10) / 10;\n      }\n    }\n  } else {\n    return weight;\n  }\n}\nfunction getAverageLifeSpan(lifespan) {\n  if (!lifespan) {\n    return 0;\n  }\n  const lifespanArray = lifespan.split(\" - \");\n  if (lifespanArray.length > 1) {\n    const lifespanInYearsArray = lifespanArray.map(l => parseInt(l));\n    const averageLifespanInYears = (lifespanInYearsArray[0] + lifespanInYearsArray[1]) / 2;\n    return Math.round(averageLifespanInYears * 10) / 10;\n  } else {\n    return parseInt(lifespan);\n  }\n}\nmodule.exports = {\n  getAverageLifeSpan,\n  getAverageWeight\n};","map":{"version":3,"names":["getAverageWeight","weight","metric","NaN","weightArray","split","length","averageWeightInKg","parseFloat","Math","round","weightInKg","getAverageLifeSpan","lifespan","lifespanArray","lifespanInYearsArray","map","l","parseInt","averageLifespanInYears","module","exports"],"sources":["C:/Users/j-aco/OneDrive/Escritorio/DoggoApi/PI-Dogs-main/client/src/Utils/GetAverageFunctions.js"],"sourcesContent":["\r\n\r\nfunction getAverageWeight(weight) {\r\n  if (typeof weight === \"object\" && weight.metric) {\r\n    if (weight.metric === NaN) {\r\n      return 20;\r\n    } else {\r\n      const weightArray = weight.metric.split(\" - \") || weight.metric.split(\" – \");\r\n      if (weightArray.length > 1) { \r\n        const averageWeightInKg = (parseFloat(weightArray[0]) + parseFloat(weightArray[1])) / 2;\r\n        return Math.round(averageWeightInKg * 10) / 10;\r\n      } else {\r\n        const weightInKg = parseFloat(weight.metric);\r\n        return Math.round(weightInKg * 10) / 10;\r\n      }\r\n    }\r\n  } else {\r\n    return weight;\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction getAverageLifeSpan(lifespan) {\r\n    if (!lifespan) {\r\n      return 0;\r\n    }\r\n    const lifespanArray = lifespan.split(\" - \");\r\n    if (lifespanArray.length > 1) {\r\n      const lifespanInYearsArray = lifespanArray.map((l) => parseInt(l));\r\n      const averageLifespanInYears = (lifespanInYearsArray[0] + lifespanInYearsArray[1]) / 2;\r\n      return Math.round(averageLifespanInYears * 10) / 10;\r\n    } else {\r\n      return parseInt(lifespan);\r\n    }\r\n  }\r\n\r\n  module.exports = {getAverageLifeSpan, getAverageWeight}"],"mappings":"AAEA,SAASA,gBAAgBA,CAACC,MAAM,EAAE;EAChC,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACC,MAAM,EAAE;IAC/C,IAAID,MAAM,CAACC,MAAM,KAAKC,GAAG,EAAE;MACzB,OAAO,EAAE;IACX,CAAC,MAAM;MACL,MAAMC,WAAW,GAAGH,MAAM,CAACC,MAAM,CAACG,KAAK,CAAC,KAAK,CAAC,IAAIJ,MAAM,CAACC,MAAM,CAACG,KAAK,CAAC,KAAK,CAAC;MAC5E,IAAID,WAAW,CAACE,MAAM,GAAG,CAAC,EAAE;QAC1B,MAAMC,iBAAiB,GAAG,CAACC,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGI,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACvF,OAAOK,IAAI,CAACC,KAAK,CAACH,iBAAiB,GAAG,EAAE,CAAC,GAAG,EAAE;MAChD,CAAC,MAAM;QACL,MAAMI,UAAU,GAAGH,UAAU,CAACP,MAAM,CAACC,MAAM,CAAC;QAC5C,OAAOO,IAAI,CAACC,KAAK,CAACC,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;MACzC;IACF;EACF,CAAC,MAAM;IACL,OAAOV,MAAM;EACf;AACF;AAIA,SAASW,kBAAkBA,CAACC,QAAQ,EAAE;EAClC,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,CAAC;EACV;EACA,MAAMC,aAAa,GAAGD,QAAQ,CAACR,KAAK,CAAC,KAAK,CAAC;EAC3C,IAAIS,aAAa,CAACR,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMS,oBAAoB,GAAGD,aAAa,CAACE,GAAG,CAAEC,CAAC,IAAKC,QAAQ,CAACD,CAAC,CAAC,CAAC;IAClE,MAAME,sBAAsB,GAAG,CAACJ,oBAAoB,CAAC,CAAC,CAAC,GAAGA,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC;IACtF,OAAON,IAAI,CAACC,KAAK,CAACS,sBAAsB,GAAG,EAAE,CAAC,GAAG,EAAE;EACrD,CAAC,MAAM;IACL,OAAOD,QAAQ,CAACL,QAAQ,CAAC;EAC3B;AACF;AAEAO,MAAM,CAACC,OAAO,GAAG;EAACT,kBAAkB;EAAEZ;AAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}