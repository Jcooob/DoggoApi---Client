{"ast":null,"code":"function getAverageWeight(weight) {\n  if (typeof weight === \"object\" && weight.metric && typeof weight.metric === \"string\" && weight.metric.match(/[-–]/)) {\n    const weightArray = weight.metric.split(/[-–]/);\n    if (weightArray.length === 2 && !isNaN(parseFloat(weightArray[0])) && !isNaN(parseFloat(weightArray[1]))) {\n      const averageWeightInKg = (parseFloat(weightArray[0]) + parseFloat(weightArray[1])) / 2;\n      return Math.round(averageWeightInKg * 10) / 10;\n    } else if (weightArray.length === 1 && !isNaN(parseFloat(weightArray[0]))) {\n      const weightInKg = parseFloat(weightArray[0]);\n      return Math.round(weightInKg * 10) / 10;\n    }\n  } else {\n    return weight;\n  }\n}\nfunction getAverageLifeSpan(lifespan) {\n  if (!lifespan) {\n    return 0;\n  }\n  const lifespanArray = lifespan.split(\" - \");\n  if (lifespanArray.length > 1) {\n    const lifespanInYearsArray = lifespanArray.map(l => parseInt(l));\n    const averageLifespanInYears = (lifespanInYearsArray[0] + lifespanInYearsArray[1]) / 2;\n    return Math.round(averageLifespanInYears * 10) / 10;\n  } else {\n    return parseInt(lifespan);\n  }\n}\nmodule.exports = {\n  getAverageLifeSpan,\n  getAverageWeight\n};","map":{"version":3,"names":["getAverageWeight","weight","metric","match","weightArray","split","length","isNaN","parseFloat","averageWeightInKg","Math","round","weightInKg","getAverageLifeSpan","lifespan","lifespanArray","lifespanInYearsArray","map","l","parseInt","averageLifespanInYears","module","exports"],"sources":["C:/Users/j-aco/OneDrive/Escritorio/DoggoApi/PI-Dogs-main/client/src/Utils/GetAverageFunctions.js"],"sourcesContent":["\r\n\r\nfunction getAverageWeight(weight) {\r\n  if (typeof weight === \"object\" && weight.metric && typeof weight.metric === \"string\" && weight.metric.match(/[-–]/)) {\r\n    const weightArray = weight.metric.split(/[-–]/);\r\n    if (weightArray.length === 2 && !isNaN(parseFloat(weightArray[0])) && !isNaN(parseFloat(weightArray[1]))) {\r\n      const averageWeightInKg = (parseFloat(weightArray[0]) + parseFloat(weightArray[1])) / 2;\r\n      return Math.round(averageWeightInKg * 10) / 10;\r\n    } else if (weightArray.length === 1 && !isNaN(parseFloat(weightArray[0]))) {\r\n      const weightInKg = parseFloat(weightArray[0]);\r\n      return Math.round(weightInKg * 10) / 10;\r\n    }\r\n  } else {\r\n    return weight;\r\n  }\r\n}\r\n\r\n\r\nfunction getAverageLifeSpan(lifespan) {\r\n    if (!lifespan) {\r\n      return 0;\r\n    }\r\n    const lifespanArray = lifespan.split(\" - \");\r\n    if (lifespanArray.length > 1) {\r\n      const lifespanInYearsArray = lifespanArray.map((l) => parseInt(l));\r\n      const averageLifespanInYears = (lifespanInYearsArray[0] + lifespanInYearsArray[1]) / 2;\r\n      return Math.round(averageLifespanInYears * 10) / 10;\r\n    } else {\r\n      return parseInt(lifespan);\r\n    }\r\n  }\r\n\r\n  module.exports = {getAverageLifeSpan, getAverageWeight}"],"mappings":"AAEA,SAASA,gBAAgBA,CAACC,MAAM,EAAE;EAChC,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACC,MAAM,IAAI,OAAOD,MAAM,CAACC,MAAM,KAAK,QAAQ,IAAID,MAAM,CAACC,MAAM,CAACC,KAAK,CAAC,MAAM,CAAC,EAAE;IACnH,MAAMC,WAAW,GAAGH,MAAM,CAACC,MAAM,CAACG,KAAK,CAAC,MAAM,CAAC;IAC/C,IAAID,WAAW,CAACE,MAAM,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAACG,KAAK,CAACC,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACxG,MAAMK,iBAAiB,GAAG,CAACD,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGI,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;MACvF,OAAOM,IAAI,CAACC,KAAK,CAACF,iBAAiB,GAAG,EAAE,CAAC,GAAG,EAAE;IAChD,CAAC,MAAM,IAAIL,WAAW,CAACE,MAAM,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACzE,MAAMQ,UAAU,GAAGJ,UAAU,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC;MAC7C,OAAOM,IAAI,CAACC,KAAK,CAACC,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;IACzC;EACF,CAAC,MAAM;IACL,OAAOX,MAAM;EACf;AACF;AAGA,SAASY,kBAAkBA,CAACC,QAAQ,EAAE;EAClC,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,CAAC;EACV;EACA,MAAMC,aAAa,GAAGD,QAAQ,CAACT,KAAK,CAAC,KAAK,CAAC;EAC3C,IAAIU,aAAa,CAACT,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMU,oBAAoB,GAAGD,aAAa,CAACE,GAAG,CAAEC,CAAC,IAAKC,QAAQ,CAACD,CAAC,CAAC,CAAC;IAClE,MAAME,sBAAsB,GAAG,CAACJ,oBAAoB,CAAC,CAAC,CAAC,GAAGA,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC;IACtF,OAAON,IAAI,CAACC,KAAK,CAACS,sBAAsB,GAAG,EAAE,CAAC,GAAG,EAAE;EACrD,CAAC,MAAM;IACL,OAAOD,QAAQ,CAACL,QAAQ,CAAC;EAC3B;AACF;AAEAO,MAAM,CAACC,OAAO,GAAG;EAACT,kBAAkB;EAAEb;AAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}